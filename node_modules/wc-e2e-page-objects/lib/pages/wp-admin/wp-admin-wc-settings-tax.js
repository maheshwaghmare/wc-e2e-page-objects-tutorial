'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require('selenium-webdriver');

var _wpE2eWebdriver = require('wp-e2e-webdriver');

var _helper = require('../../helper');

var wcHelper = _interopRequireWildcard(_helper);

var _wpAdminWcSettings = require('./wp-admin-wc-settings');

var _wpAdminWcSettings2 = _interopRequireDefault(_wpAdminWcSettings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module WPAdminWCSettingsTax
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * External dependencies
 */


/**
 * Internal Dependencies
 */


var CALCULATE_TAX_BASED_ON_SELECTOR = wcHelper.getSelect2ToggleSelectorByName('woocommerce_tax_based_on');
var SHIPPING_TAX_CLASS_SELECTOR = wcHelper.getSelect2ToggleSelectorByName('woocommerce_shipping_tax_class');
var ROUNDING_SELECTOR = _seleniumWebdriver.By.css('#woocommerce_tax_round_at_subtotal');
var ADDITIONAL_TAX_CLASSES_SELECTOR = _seleniumWebdriver.By.css('#woocommerce_tax_classes');
var DISPLAY_PRICES_IN_THE_SHOP_SELECTOR = wcHelper.getSelect2ToggleSelectorByName('woocommerce_tax_display_shop');
var DISPLAY_PRICES_DURING_CART_CHECKOUT_SELECTOR = wcHelper.getSelect2ToggleSelectorByName('woocommerce_tax_display_cart');
var PRICE_DISPLAY_SUFFIX_SELECTOR = _seleniumWebdriver.By.css('#woocommerce_price_display_suffix');
var DISPLAY_TAX_TOTALS_SELECTOR = wcHelper.getSelect2ToggleSelectorByName('woocommerce_tax_total_display');

var defaultArgs = {
	url: '',
	visit: true
};

/**
 * The Tax: Tax Options settings screen.
 *
 * @extends WPAdminWCSettings
 */

var WPAdminWCSettingsTax = function (_WPAdminWCSettings) {
	_inherits(WPAdminWCSettingsTax, _WPAdminWCSettings);

	/**
 	* @param {WebDriver} driver   - Instance of WebDriver.
 	* @param {object}    args     - Configuration arguments.
 */
	function WPAdminWCSettingsTax(driver) {
		var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		_classCallCheck(this, WPAdminWCSettingsTax);

		args = Object.assign(defaultArgs, args);
		return _possibleConstructorReturn(this, (WPAdminWCSettingsTax.__proto__ || Object.getPrototypeOf(WPAdminWCSettingsTax)).call(this, driver, args));
	}

	/**
 * Set the "Prices entered with tax" option to "Yes".
 	* @return {Promise}   Promise that evaluates to `true` if set selected successfully, `false` otherwise.
 */


	_createClass(WPAdminWCSettingsTax, [{
		key: 'selectPricesEnteredWithTax',
		value: function selectPricesEnteredWithTax() {
			var selector = this._getPriceEnteredWithTaxSelector('yes');
			return _wpE2eWebdriver.WebDriverHelper.clickWhenClickable(this.driver, selector);
		}

		/**
  * Set the "Prices entered with tax" option to "No".
  	* @return {Promise}   Promise that evaluates to `true` if set selected successfully, `false` otherwise.
  */

	}, {
		key: 'selectPricesEnteredWithNoTax',
		value: function selectPricesEnteredWithNoTax() {
			var selector = this._getPriceEnteredWithTaxSelector('no');
			return _wpE2eWebdriver.WebDriverHelper.clickWhenClickable(this.driver, selector);
		}

		/**
  * Select the weight unit.
  *
  	* @param  {string}    option - Text for option to select.
  	* @return {Promise}   Promise that evaluates to `true` if selected successfully, `false` otherwise.
  */

	}, {
		key: 'selectCalculateTaxBasedOn',
		value: function selectCalculateTaxBasedOn(option) {
			return wcHelper.select2Option(this.driver, CALCULATE_TAX_BASED_ON_SELECTOR, option);
		}

		/**
  * Select the shipping tax class.
  *
  	* @param  {string}    option - Text for option to select.
  	* @return {Promise}   Promise that evaluates to `true` if selected successfully, `false` otherwise.
  */

	}, {
		key: 'selectShippingTaxClass',
		value: function selectShippingTaxClass(option) {
			return wcHelper.select2Option(this.driver, SHIPPING_TAX_CLASS_SELECTOR, option);
		}

		/**
  * Check the "Rounding" checkbox.
  *
  	* @return {Promise}   Promise that evaluates to `true` if box is/gets checked successfully, `false` otherwise.
  */

	}, {
		key: 'checkRounding',
		value: function checkRounding() {
			_wpE2eWebdriver.WebDriverHelper.unsetCheckbox(this.driver, ROUNDING_SELECTOR);
			return _wpE2eWebdriver.WebDriverHelper.setCheckbox(this.driver, ROUNDING_SELECTOR);
		}

		/**
  * Uncheck the "Rounding" checkbox.
  *
  	* @return {Promise}   Promise that evaluates to `true` if box is/gets unchecked successfully, `false` otherwise.
  */

	}, {
		key: 'uncheckRounding',
		value: function uncheckRounding() {
			_wpE2eWebdriver.WebDriverHelper.setCheckbox(this.driver, ROUNDING_SELECTOR);
			return _wpE2eWebdriver.WebDriverHelper.unsetCheckbox(this.driver, ROUNDING_SELECTOR);
		}

		/**
  * Remove all of the additional tax classes from the additional tax class field.
  *
  	* @return {Promise}   Promise that evaluates to `true` if input found and set successfully, `false` otherwise.
  */

	}, {
		key: 'removeAdditionalTaxClasses',
		value: function removeAdditionalTaxClasses() {
			return _wpE2eWebdriver.WebDriverHelper.setWhenSettable(this.driver, ADDITIONAL_TAX_CLASSES_SELECTOR, '');
		}

		/**
  * Add an additional tax class to the additional tax class field.
  *
  * @param  {string}    value - Tax class to add
  	* @return {Promise}   Promise that evaluates to `true` if input found and class added successfully, `false` otherwise.
  */

	}, {
		key: 'addAdditionalTaxClass',
		value: function addAdditionalTaxClass(value) {
			var driver = this.driver;

			return this.driver.findElement(ADDITIONAL_TAX_CLASSES_SELECTOR).then(function (element) {
				return element.getAttribute('value').then(function (elValue) {
					return _wpE2eWebdriver.WebDriverHelper.setWhenSettable(driver, ADDITIONAL_TAX_CLASSES_SELECTOR, (elValue + '\n' + value).trim());
				});
			}, function () {
				return false;
			});
		}

		/**
  * Remove an additional tax class from the additional tax class field.
  *
  * @param  {string}    value - Tax class to remove
  	* @return {Promise}   Promise that evaluates to `true` if input found and class removed successfully, `false` otherwise.
  */

	}, {
		key: 'removeAdditionalTaxClass',
		value: function removeAdditionalTaxClass(value) {
			var driver = this.driver;

			return this.driver.findElement(ADDITIONAL_TAX_CLASSES_SELECTOR).then(function (element) {
				return element.getAttribute('value').then(function (elValue) {
					return _wpE2eWebdriver.WebDriverHelper.setWhenSettable(driver, ADDITIONAL_TAX_CLASSES_SELECTOR, elValue.replace(new RegExp(value + '\n?'), ''));
				});
			}, function () {
				return false;
			});
		}

		/**
  * Select the "Display prices in the shop" option.
  *
  	* @param  {string}    option - Text for option to select.
  	* @return {Promise}   Promise that evaluates to `true` if selected successfully, `false` otherwise.
  */

	}, {
		key: 'selectDisplayPricesInTheShop',
		value: function selectDisplayPricesInTheShop(option) {
			return wcHelper.select2Option(this.driver, DISPLAY_PRICES_IN_THE_SHOP_SELECTOR, option);
		}

		/**
  * Select the "Display prices during cart and checkout" option.
  *
  	* @param  {string}    option - Text for option to select.
  	* @return {Promise}   Promise that evaluates to `true` if selected successfully, `false` otherwise.
  */

	}, {
		key: 'selectDisplayPricesDuringCartAndCheckout',
		value: function selectDisplayPricesDuringCartAndCheckout(option) {
			return wcHelper.select2Option(this.driver, DISPLAY_PRICES_DURING_CART_CHECKOUT_SELECTOR, option);
		}

		/**
  * Set the price display suffix field.
  *
  	* @param  {string}    value - Price display suffix.
  	* @return {Promise}   Promise that evaluates to `true` if set successfully, `false` otherwise.
  */

	}, {
		key: 'setPriceDisplaySuffix',
		value: function setPriceDisplaySuffix(value) {
			return _wpE2eWebdriver.WebDriverHelper.setWhenSettable(this.driver, PRICE_DISPLAY_SUFFIX_SELECTOR, value);
		}

		/**
  * Select the "Display tax totals" option.
  *
  	* @param  {string}    option - Text for option to select.
  	* @return {Promise}   Promise that evaluates to `true` if selected successfully, `false` otherwise.
  */

	}, {
		key: 'selectDisplayTaxTotals',
		value: function selectDisplayTaxTotals(option) {
			return wcHelper.select2Option(this.driver, DISPLAY_TAX_TOTALS_SELECTOR, option);
		}

		/**
  * Get a selector for a "Prices entered with tax" radio option. (Internal use only)
  *
  	* @param  {string}    option - Text for option to select.
  	* @return {object}    Selector.
  */

	}, {
		key: '_getPriceEnteredWithTaxSelector',
		value: function _getPriceEnteredWithTaxSelector(option) {
			return _seleniumWebdriver.By.css('input[name="woocommerce_prices_include_tax"][value="' + option + '"]');
		}
	}]);

	return WPAdminWCSettingsTax;
}(_wpAdminWcSettings2.default);

exports.default = WPAdminWCSettingsTax;
module.exports = exports['default'];