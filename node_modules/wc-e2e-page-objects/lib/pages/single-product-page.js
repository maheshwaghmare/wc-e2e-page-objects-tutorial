'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require('selenium-webdriver');

var _wpE2eWebdriver = require('wp-e2e-webdriver');

var _wpE2ePageObjects = require('wp-e2e-page-objects');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module SingleProductPage
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * External dependencies
 */


var ADD_TO_CART_BUTTON_SELECTOR = _seleniumWebdriver.By.css('button.single_add_to_cart_button');
var QUANTITY_SELECTOR = _seleniumWebdriver.By.css('input[name="quantity"]');

var defaultArgs = {
	visit: true
};

/**
 * The front-end Single Product page.
 *
 * @extends Page
 */

var SingleProductPage = function (_Page) {
	_inherits(SingleProductPage, _Page);

	/**
 	* @param {WebDriver} driver   - Instance of WebDriver.
 	* @param {object}    args     - Configuration arguments.
 */
	function SingleProductPage(driver) {
		var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		_classCallCheck(this, SingleProductPage);

		args = Object.assign(defaultArgs, args);
		return _possibleConstructorReturn(this, (SingleProductPage.__proto__ || Object.getPrototypeOf(SingleProductPage)).call(this, driver, args));
	}

	/**
 * Click the "Add to cart" button.
 *
 	* @return {Promise}   Promise that evaluates to `true` if button is found and clicked, `false` otherwise.
 */


	_createClass(SingleProductPage, [{
		key: 'addToCart',
		value: function addToCart() {
			return _wpE2eWebdriver.WebDriverHelper.clickWhenClickable(this.driver, ADD_TO_CART_BUTTON_SELECTOR);
		}

		/**
  * Set the quantity field.
  *
  	* @param {integer}   quantity - Amount to set to
  	* @return {void}
  */

	}, {
		key: 'setQuantity',
		value: function setQuantity(quantity) {
			var el = this.driver.findElement(QUANTITY_SELECTOR);

			_wpE2eWebdriver.WebDriverHelper.waitForFieldClearable(this.driver, QUANTITY_SELECTOR);
			el.sendKeys(quantity);
		}

		/**
  * Click a product.
  *
  	* @param  {string}    attribute - The attribute to set for (e.g. 'Color').
  	* @param  {string}    variation - The value to set for the attribute (e.g. 'Black').
  	* @return {Promise}   Promise that evaluates to `true` if variation found and set, `false` otherwise.
  */

	}, {
		key: 'selectVariation',
		value: function selectVariation(attribute, variation) {
			var selector = this._getVariationDropdownSelector(attribute);
			return _wpE2eWebdriver.WebDriverHelper.selectOption(this.driver, selector, variation);
		}

		/**
  * Get the xpath selector for selecting variations. (Internal use only)
  *
  	* @param  {string}    attribute - The attribute to set for (e.g. 'Color').
  	* @return {selector}
  */

	}, {
		key: '_getVariationDropdownSelector',
		value: function _getVariationDropdownSelector(attribute) {
			return _seleniumWebdriver.By.xpath('//label[contains(text(), "' + attribute + '")]/parent::*/parent::*//select');
		}
	}]);

	return SingleProductPage;
}(_wpE2ePageObjects.Page);

exports.default = SingleProductPage;
module.exports = exports['default'];