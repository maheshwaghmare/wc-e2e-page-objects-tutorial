'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _seleniumWebdriver = require('selenium-webdriver');

var _wpE2eWebdriver = require('wp-e2e-webdriver');

var _wpE2ePageObjects = require('wp-e2e-page-objects');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * External dependencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var LOGIN_FORM_SELECTOR = _seleniumWebdriver.By.css('.woocommerce-form-login');
var USERNAME_FIELD_SELECTOR = _seleniumWebdriver.By.css('#username');
var PASSWORD_FIELD_SELECTOR = _seleniumWebdriver.By.css('#password');
var LOGIN_BUTTON_SELECTOR = _seleniumWebdriver.By.css('[name="login"]');

/**
 * My account page login form component.
 *
 * @extends Component
 */

var ComponentMyAccountLoginForm = function (_Component) {
	_inherits(ComponentMyAccountLoginForm, _Component);

	function ComponentMyAccountLoginForm(driver) {
		var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LOGIN_FORM_SELECTOR;

		_classCallCheck(this, ComponentMyAccountLoginForm);

		return _possibleConstructorReturn(this, (ComponentMyAccountLoginForm.__proto__ || Object.getPrototypeOf(ComponentMyAccountLoginForm)).call(this, driver, selector));
	}

	/**
  * Set username field.
  *
  * @param {string} username - Username.
  *
  * @return {Promise} Promise that evaluates to `true` if username field is
  *                   set successfully, `false` otherwise.
  */


	_createClass(ComponentMyAccountLoginForm, [{
		key: 'setUsername',
		value: function setUsername(username) {
			return _wpE2eWebdriver.WebDriverHelper.setWhenSettable(this.driver, USERNAME_FIELD_SELECTOR, username);
		}

		/**
   * Set password field.
   *
   * @param {string} password - Password.
   *
   * @return {Promise} Promise that evaluates to `true` if password field is
   *                   set successfully, `false` otherwise.
   */

	}, {
		key: 'setPassword',
		value: function setPassword(password) {
			return _wpE2eWebdriver.WebDriverHelper.setWhenSettable(this.driver, PASSWORD_FIELD_SELECTOR, password);
		}

		/**
   * Login.
   *
   * @return {Promise} Promise that evaluates to `true` if login button is
   *                   clicked successfully.
   */

	}, {
		key: 'login',
		value: function login() {
			return _wpE2eWebdriver.WebDriverHelper.clickWhenClickable(this.driver, LOGIN_BUTTON_SELECTOR);
		}
	}]);

	return ComponentMyAccountLoginForm;
}(_wpE2ePageObjects.Component);

exports.default = ComponentMyAccountLoginForm;
module.exports = exports['default'];