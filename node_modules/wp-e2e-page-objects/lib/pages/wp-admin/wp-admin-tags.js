'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wpAdminCategories = require('./wp-admin-categories');

var _wpAdminCategories2 = _interopRequireDefault(_wpAdminCategories);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Internal dependencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var WPAdminTags = function (_WPAdminCategories) {
	_inherits(WPAdminTags, _WPAdminCategories);

	function WPAdminTags(driver) {
		var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		_classCallCheck(this, WPAdminTags);

		return _possibleConstructorReturn(this, (WPAdminTags.__proto__ || Object.getPrototypeOf(WPAdminTags)).call(this, driver, args));
	}

	_createClass(WPAdminTags, [{
		key: 'editTagWithName',
		value: function editTagWithName(name) {
			return this.editCategoryWithName(name);
		}
	}, {
		key: 'viewTagWithName',
		value: function viewTagWithName(name) {
			return this.viewCategoryWithName(name);
		}
	}, {
		key: 'deleteTagWithName',
		value: function deleteTagWithName(name) {
			return this.deleteCategoryWithName(name);
		}
	}]);

	return WPAdminTags;
}(_wpAdminCategories2.default);

exports.default = WPAdminTags;
module.exports = exports['default'];